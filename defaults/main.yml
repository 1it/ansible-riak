---
# override this with the location of the package
# options:
#   - URL to package
#   - file path to package (path must be accessible on machine running playbook)
#   - package name
riak_package:       riak

riak_enterprise:    false
riak_usr_lib:       /usr/lib

riak_admin:   '/usr/sbin/riak-admin'

riak_node_name:     'riak@{{ ansible_fqdn }}'

riak_pb_bind_ip:    0.0.0.0
riak_pb_port:       8087
riak_pb_conf:       "{{ riak_pb_bind_ip }}:{{ riak_pb_port }}"

riak_http_bind_ip:  0.0.0.0
riak_http_port:     8098
riak_http_conf:     "{{ riak_http_bind_ip }}:{{ riak_http_port }}"

riak_net_speed:     1Gb

# disc tuning
riak_filesystem:    ext4
riak_mountpoint:    /
riak_mount_options: noatime,barrier=0,errors=remount-ro
riak_partition:     /dev/mapper/VolGroup-lv_root
riak_physical_disks:
  - sda

# options
riak_tune_disks:    false
riak_tune_os:       false
riak_scheduler:     noop


# Configure riak.conf
#
# The riak_conf is a dictionary structured variable for storing settings that you wish to override or add to the
# riak.conf file. If riak_conf is not defined, then the riak.conf that is distributed with Riak will be untouched.
# To avoid conflicts with Jinja's syntax, replace periods with dashes within config keys,
# e.g. 'search.solr.start_timeout' becomes 'search-solr-start_timeout'. Below is a sample definition for the
# riak_conf var.
#
#riak_conf:
#    log-crash-file:                     "$(platform_log_dir)/crash.log"
#    log-error-file:                     "$(platform_log_dir)/error.log"
#    nodename:                           "riak@{{ riak_ip_addr }}"
#    storage_backend:                    "bitcask"
#    strong_consistency:                 "off"
#
# @see http://docs.basho.com/riak/latest/ops/advanced/configs/configuration-files/


# Create bucket types
#
#riak_bucket_types:
#  - { name: counters, props: '{"props":{"datatype":"counter"}}' }
#  - { name: maps, props: '{"props":{"datatype":"map"}}' }
#  - { name: sets, props: '{"props":{"datatype":"set"}}' }


# Create users
#
#riak_users:
#  - {user: 'user1', password: '', cert: ''}
#  - {user: 'user2', password: 'somepassword_that_is_more_complex_than_this', cert: ''}


# Create security sources
#riak_sources:
#  - {user: 'user1', type: 'certificate', cidr: '0.0.0.0/0'}
#  - {user: 'user2', type: 'password', cidr: '0.0.0.0/0'}
#  - {user: 'user3', type: 'trust', cidr: '0.0.0.0/0'}
#  - {user: 'user4', type: 'pam', cidr: '0.0.0.0/0'}


# Create permission grants
#
#riak_grants:
#  - {subject: 'user', bucket_type: 'certificate', bucket: '', permissions: ''}
#  - {subject: 'group', bucket_type: 'password', bucket: '', permissions: ''}

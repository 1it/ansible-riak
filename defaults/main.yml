---
riak_version:       2.0.2
riak_enterprise:    false
riak_usr_lib:       /usr/lib

# override this with the location of the package
# options:
#   - URL to package
#   - file path to package (path must be accessible on machine running playbook)
#   - package name
riak_package:       riak

riak_iface:                 eth0
riak_ip_addr:               "{{ hostvars[inventory_hostname]['ansible_' + riak_iface]['ipv4']['address'] }}"
riak_pb_bind_ip:            127.0.0.1
riak_pb_port:               8087
riak_http_bind_ip:          127.0.0.1
riak_http_port:             8098
riak_net_speed:             1Gb

# disc tuning
riak_filesystem:    ext4
riak_mountpoint:    /
riak_mount_options: noatime,barrier=0,errors=remount-ro
riak_partition:     /dev/mapper/VolGroup-lv_root
riak_physical_disks:
  - sda

# options
riak_tune_disks:    false
riak_tune_os:       false
riak_scheduler:     noop

# riak.conf settings
#
# The riak_conf is a dictionary structured variable for storing settings that you wish to override or add to the
# riak.conf file. If riak_conf is not defined, then the riak.conf that is distributed with Riak will be untouched.
# To avoid conflicts with Jinja's syntax, replace periods with dashes within config keys,
# e.g. 'search.solr.start_timeout' becomes 'search-solr-start_timeout'. Below is a sample definition for the
# riak_conf var.
#
riak_conf:
    listener-http-internal:             "{{ riak_http_bind_ip }}:{{ riak_http_port }}"
    listener-protobuf-internal:         "{{ riak_pb_bind_ip }}:{{ riak_pb_port }}"
    log-crash-file:                     "$(platform_log_dir)/crash.log"
    log-error-file:                     "$(platform_log_dir)/error.log"
    nodename:                           "riak@{{ riak_ip_addr }}"
    storage_backend:                    "bitcask"
    strong_consistency:                 "off"
#
# @see http://docs.basho.com/riak/latest/ops/advanced/configs/configuration-files/

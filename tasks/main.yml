---
- name: Install libselinux-python
  yum: name=libselinux-python

- name: Execute RedHat OS family specific install
  include: RedHat.yml
  when: ansible_os_family == 'RedHat'

- name: Execute Debian OS family specific install
  include: Debian.yml
  when: ansible_os_family == 'Debian'

- name: update pam configuration
  copy: src=etc_security_limits.d_riak.conf dest=/etc/security/limits.d/riak.conf owner=root group=root mode=0644

- name: mount the riak volume with optmized settings
  mount: name={{ riak_mountpoint }} src={{ riak_partition }} opts="{{riak_mount_options}}" fstype="{{riak_filesystem}}" state=mounted
  when: riak_tune_disks

- name: confgure rc.local
  template: src=etc_rc.local.j2 dest=/etc/rc.local owner=root group=root mode=0755
  notify: source rclocal
  when: riak_tune_disks

- name: create sysctl.d
  file: dest=/etc/sysctl.d state=directory

- name: configure sysctl
  template: src=etc_sysctl.d_riak.conf.j2 dest=/etc/sysctl.d/riak.conf owner=root group=root mode=0644
  notify:
    - check proc writeable
    - update sysctl

- name: copying custom beams
  copy: "src={{ item }} dest={{ riak_patch_dir }}/"
  with_fileglob:
    - "{{riak_custom_beams_dir}}/*.beam"
  when: riak_custom_beams_dir is defined
  notify:
    - restart riak
    - wait for http
    - wait for kv

- name: preserve distribution copy of riak.conf
  command: cp /etc/riak/riak.conf /etc/riak/riak.conf.dist
  tags: configfiles

- name: Set listening ip/port within riak.conf
  lineinfile: "dest=/etc/riak/riak.conf regexp='^{{ item.key }} = .+$' line='{{ item.key }} = {{ item.value }}'"
  tags: configfiles
  with_items:
    - { key: listener.http.internal, value: "{{ riak_http_bind_ip }}: {{ riak_http_bind_port }}" }
    - { key: listener.protobuf.internal, value: "{{ riak_pb_bind_ip }}: {{ riak_pb_bind_port }}" }

- name: Replace / add config settings to riak.conf
  lineinfile: "dest=/etc/riak/riak.conf regexp='^{{ item.key }} = .+$' line='{{ item.key }} = {{ item.value }}'"
  tags: configfiles
  when: riak_conf is defined
  with_dict: riak_conf

- name: Tag riak.conf as ansible managed
  lineinfile: "dest=/etc/riak/riak.conf regexp='^Ansible managed:.+$'  line='## Ansible Managed\n' insertbefore='BOF'"
  tags: configfiles
  notify:
    - restart riak
    - wait for http
    - wait for kv

- name: Make certain Riak is set to start on boot and is currently running
  service: name=riak enabled=yes state=started

- name: wait for port to become active
  wait_for: port={{ riak_http_port }}

- name: wait for riak_kv service to start
  riak: wait_for_service=kv

- name: ping riak
  riak: command=ping
  register: info
